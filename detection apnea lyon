from script import *
import physio 
import sonpy
import neo
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
from pprint import pprint
import pandas as pd
from pandasgui import show
from scipy import signal

duree_baseline =300
date_injection =770
crise =1425
post_ictal =1465
end_time =post_ictal +2400

sig, srate, unit, time = read_one_mouse_from_nc(' 260 j9 210624 FIS1')
resp_bis = iirfilt(sig, srate, lowcut = 0.5, highcut = 30)
resp_bis =signal.detrend(resp_bis)

resp, resp_cycles = physio.compute_respiration(resp_bis, srate, parameter_preset='rat_plethysmo') 
resp_cycles['frequence_respi']=60/resp_cycles['cycle_duration']


#ici on vire les cycles qui corresponde a du bruit de fond et on remplace les valeurs pour une seule detection 

 
condition1 = (resp_cycles['inspi_time'] >= 1443.5) & (resp_cycles['inspi_time'] <= 1449)
condition2 = (resp_cycles['inspi_time'] >= 1450.2) & (resp_cycles['inspi_time'] <= 1454.5)

total_duration = resp_cycles.loc[condition1, 'cycle_duration'].sum()
resp_cycles = resp_cycles.drop(resp_cycles[condition1].index)
total_duration2 = resp_cycles.loc[condition2, 'cycle_duration'].sum()
resp_cycles = resp_cycles.drop(resp_cycles[condition2].index)

resp_cycles.loc[9990, 'total_amplitude'] = 0
resp_cycles.loc[9990, 'cycle_duration'] = total_duration
resp_cycles.loc[9990, 'frequence_respi'] = 60/total_duration

resp_cycles.loc[10015, 'total_amplitude'] = 0
resp_cycles.loc[10015, 'cycle_duration'] = total_duration2
resp_cycles.loc[10015, 'frequence_respi'] = 60/total_duration2


inspi_index = resp_cycles['inspi_index'].values
expi_index = resp_cycles['expi_index'].values


#un mask pour la baseline et un pour de la crise à la fin de l'enregistrement 
mask_baseline = (resp_cycles['inspi_time'] < date_injection) & (resp_cycles['inspi_time'] > (date_injection-duree_baseline))
mask_crise = (resp_cycles['inspi_time']< end_time) & (resp_cycles['inspi_time'] > crise)

#etude des parametres 
frequence_moyenne= resp_cycles[mask_baseline]['frequence_respi'].mean()
amplitude_moyenne=resp_cycles[mask_baseline]['total_amplitude'].mean()
volume_moyen = resp_cycles[mask_baseline]['total_volume'].mean()
duree_moyenne= resp_cycles[mask_baseline]['cycle_duration'].mean()

'''
Detection des apnées : 

3*duree moyenne d'un cycle en baseline 
Ou 3 cycle minimum consecutif avec une perte d'amplitude de 80% 

'''
#les seuils
threshold = duree_moyenne * 3
seuil_amplitude = amplitude_moyenne * 0.2 

#dataframe des apnées de duree 
apnea_cycles = resp_cycles[(resp_cycles['cycle_duration'] > threshold)]
apnea_times_sec = apnea_cycles['inspi_time'].values
apnea_cycles['total_duration']=apnea_cycles['cycle_duration']
apnea_cycles['apnee']=True

#show (apnea_cycles)

#dataframe des apnées d'amplitude 
mask_amplitude = resp_cycles[(resp_cycles['total_amplitude']< seuil_amplitude)]
#show (mask_amplitude)

# on classe dans consecutive groups les indexs du dataframe d'amplitude les groupes d'indices consecutifs 
index_amplitude = mask_amplitude.index
index_df = pd.DataFrame(index_amplitude, columns=['index'])
index_df['group'] = (index_df['index'] != index_df['index'].shift() + 1).cumsum()
consecutive_groups = index_df.groupby('group')['index'].apply(list)

#uniiquement les groupes de au moins 3 cycles d'affilés 
faible_amplitude = consecutive_groups[consecutive_groups.apply(len) >= 3]

premiers_cycles = pd.DataFrame(columns=resp_cycles.columns)
for group in faible_amplitude:
    indices = group
    total_duration = resp_cycles.loc[indices, 'cycle_duration'].sum()
    first_index = indices[0]
    premier_cycle = resp_cycles.loc[first_index].copy()
    premier_cycle['total_duration'] = total_duration
    premiers_cycles = pd.concat([premiers_cycles, premier_cycle.to_frame().T], ignore_index=True)

premiers_cycles['apnee']=False
#show (premiers_cycles)

total_apnea=pd.concat([apnea_cycles,premiers_cycles], axis = 0,ignore_index=True)
total_apnea =total_apnea.drop_duplicates(subset='inspi_index')

total_apnea = total_apnea.sort_values(by='inspi_index')
#show(total_apnea)


#affichage du signal respi + apnée normal en bleu , apnee amplitude en vert 

mask_baseline_apnea = (total_apnea['inspi_time'] < date_injection) & (total_apnea['inspi_time'] > (date_injection-duree_baseline))
mask_crise_apnea = (total_apnea['inspi_time']< end_time) & (total_apnea['inspi_time'] > crise)


fig,ax= plt.subplots(nrows=1,sharex=True)

ax.plot(time,resp_bis)
ax.scatter(time[inspi_index], resp[inspi_index], marker='o', color='green')
ax.scatter(time[expi_index], resp[expi_index], marker='o', color='red')
ax.axvline(x=date_injection, color='r', linestyle='--')  
ax.axvline(x=date_injection-duree_baseline, color='r', linestyle='--') 
ax.axvline(x=crise,color='k',linestyle='--')
ax.axvline(x=post_ictal,color='k',linestyle='--')

for index, row in total_apnea[mask_baseline_apnea].iterrows():
    inspi_time = row['inspi_time']
    if row['apnee']:
        ax.axvline(inspi_time, color='blue', lw=2, linestyle='--')
    else:
        ax.axvline(inspi_time, color='green', lw=2, linestyle='--')

for index, row in total_apnea[mask_crise_apnea].iterrows():
    inspi_time = row['inspi_time']
    if row['apnee']:
        ax.axvline(inspi_time, color='blue', lw=2, linestyle='--')
    else:
        ax.axvline(inspi_time, color='green', lw=2, linestyle='--')

plt.show()


